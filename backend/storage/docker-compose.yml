# GDNA Baseline - Core Storage Services
# Local development setup for PostgreSQL, MongoDB, RabbitMQ, and MinIO

version: '3.8'

services:
  # PostgreSQL - Relational Database
  postgresql:
    image: postgres:15
    container_name: gdna-postgresql
    environment:
      POSTGRES_DB: gdna_baseline
      POSTGRES_USER: gdna_user
      POSTGRES_PASSWORD: dev_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gdna_user -d gdna_baseline"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gdna-network

  # MongoDB - Document Database
  mongodb:
    image: mongo:7
    container_name: gdna-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: dev_password
      MONGO_INITDB_DATABASE: gdna_baseline
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init.js:/docker-entrypoint-initdb.d/init.js
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gdna-network

  # Redis - Cache and Session Store
  redis:
    image: redis:7-alpine
    container_name: gdna-redis
    command: redis-server --requirepass dev_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "dev_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gdna-network

  # RabbitMQ - Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    container_name: gdna-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: gdna_user
      RABBITMQ_DEFAULT_PASS: dev_password
      RABBITMQ_DEFAULT_VHOST: gdna_vhost
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gdna-network

  # MinIO - S3-Compatible Object Storage
  minio:
    image: minio/minio:latest
    container_name: gdna-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: dev_password
    ports:
      - "9000:9000"   # API port
      - "9001:9001"   # Console UI
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gdna-network

  # OpenSearch - Search and Analytics
  opensearch:
    image: opensearchproject/opensearch:2.8.0
    container_name: gdna-opensearch
    environment:
      - cluster.name=gdna-cluster
      - node.name=gdna-node
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
      - "9600:9600"
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gdna-network

volumes:
  postgresql_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  minio_data:
    driver: local
  opensearch_data:
    driver: local

networks:
  gdna-network:
    driver: bridge
