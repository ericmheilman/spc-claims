apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "gdna-lyzr-baseline.fullname" . }}-backend
  labels:
    {{- include "gdna-lyzr-baseline.labels" . | nindent 4 }}
    app.kubernetes.io/component: backend
spec:
  replicas: {{ .Values.backend.replicaCount | default 1 }}
  selector:
    matchLabels:
      {{- include "gdna-lyzr-baseline.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        {{- include "gdna-lyzr-baseline.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: backend
    spec:
      {{- if .Values.backend.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.backend.imagePullSecrets | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "gdna-lyzr-baseline.serviceAccountName" . }}
      containers:
        - name: backend
          image: "{{ .Values.global.imageRegistry }}{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
          imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.backend.service.port | default 8080 }}
              protocol: TCP
          env:
            - name: ENVIRONMENT
              value: {{ .Values.global.environment | quote }}
            - name: API_VERSION
              value: {{ .Values.backend.apiVersion | default "1.0.0" | quote }}
            - name: DEBUG
              value: {{ .Values.backend.debug | default false | quote }}
            - name: PORT
              value: {{ .Values.backend.service.port | default 8080 | quote }}
            - name: HOST
              value: "0.0.0.0"
            - name: MAX_WORKERS
              value: {{ .Values.backend.maxWorkers | default 4 | quote }}
            - name: TIMEOUT
              value: {{ .Values.backend.timeout | default 30 | quote }}
            
            # Database URLs
            - name: POSTGRESQL_URL
              valueFrom:
                secretKeyRef:
                  name: postgresql-credentials
                  key: url
            - name: MONGODB_URL
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: url
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: redis-credentials
                  key: url
            - name: RABBITMQ_URL
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-credentials
                  key: url
            - name: MINIO_URL
              valueFrom:
                secretKeyRef:
                  name: minio-credentials
                  key: url
            - name: OPENSEARCH_URL
              value: "http://{{ include "gdna-lyzr-baseline.fullname" . }}-opensearch:9200"
            
            # API Keys
            - name: LYZR_API_KEY
              valueFrom:
                secretKeyRef:
                  name: lyzr-api-key
                  key: api-key
            
            # Operator Configuration
            {{- if .Values.operators.pinecone.enabled }}
            - name: PINECONE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: pinecone-credentials
                  key: api-key
            - name: PINECONE_ENVIRONMENT
              value: {{ .Values.operators.pinecone.config.environment | default "us-west1-gcp" | quote }}
            {{- end }}
            
            {{- if .Values.operators.neo4j.enabled }}
            - name: NEO4J_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: neo4j-credentials
                  key: password
            {{- end }}
            
            {{- if .Values.operators.arangodb.enabled }}
            - name: ARANGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: arangodb-credentials
                  key: password
            {{- end }}
          
          resources:
            {{- toYaml .Values.backend.resources | nindent 12 }}
          
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          
          {{- if .Values.backend.volumeMounts }}
          volumeMounts:
            {{- toYaml .Values.backend.volumeMounts | nindent 12 }}
          {{- end }}
      
      {{- if .Values.backend.volumes }}
      volumes:
        {{- toYaml .Values.backend.volumes | nindent 8 }}
      {{- end }}
      
      {{- if .Values.backend.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.backend.nodeSelector | nindent 8 }}
      {{- end }}
      
      {{- if .Values.backend.affinity }}
      affinity:
        {{- toYaml .Values.backend.affinity | nindent 8 }}
      {{- end }}
      
      {{- if .Values.backend.tolerations }}
      tolerations:
        {{- toYaml .Values.backend.tolerations | nindent 8 }}
      {{- end }}